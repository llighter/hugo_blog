<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on llighter&#39;s blog</title>
    <link>https://llighter.github.io/hugo_blog/posts/</link>
    <description>Recent content in Posts on llighter&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>hadbsgk@gmail.com (PARK YUNHA)</managingEditor>
    <webMaster>hadbsgk@gmail.com (PARK YUNHA)</webMaster>
    <copyright>(c) 2017 - 2018</copyright>
    <lastBuildDate>Wed, 05 Apr 2017 19:17:38 +0900</lastBuildDate>
    
	<atom:link href="https://llighter.github.io/hugo_blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Volunteer in Mozilla Korea Community 번역으로 시작하기</title>
      <link>https://llighter.github.io/hugo_blog/2017/04/volunteer-in-mozilla-korea-community-%EB%B2%88%EC%97%AD%EC%9C%BC%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 05 Apr 2017 19:17:38 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/04/volunteer-in-mozilla-korea-community-%EB%B2%88%EC%97%AD%EC%9C%BC%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
      <description>RandomSource.getRandomValues() 이 링크는 내가 처음으로 기술 문서를 번역한 페이지이다. 사실 기존에 기술문서를 볼 때 영어 공부하는 심정으로 인내심을 가지고 보고는 했다. 하지만 가끔 가다 한국어로 번역이 되어 있는 문서를 볼 때면 조금 더 빠르고 수월하게 문서의 내용을 이해할 수 있었다. 그러다 마침 javascript의 Math.random() 함수에 대해 알아보고 있던 중에 javascript 에서는 random()함수는 seed를 줄 수 없다는 사실을 알았고 암호학적으로 강력한 수준의 ramdom값을 생성하는 메소드가 있는지 찾아보던 중에 RandomSource.getRandomValues()을 알게 되었다. 많이 사용하는 Math.</description>
    </item>
    
    <item>
      <title>Javascript: 함수 정의하기</title>
      <link>https://llighter.github.io/hugo_blog/2017/04/javascript-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Tue, 04 Apr 2017 19:00:32 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/04/javascript-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0/</guid>
      <description>jQuery(javascript)에서는 함수를 사용하는 방법이 크게 두가지가 있다. 아래의 내용은 MDN-Defining functions의 내용을 참고한 것이다.
1. The function declaration(function statement) function name([param[, param[, ... param]]]) { statements }  name - 함수의 이름.
param - 함수에 전달될 인자의 이름. 최대 255개 까지 가질 수 있다.
statements - 함수 안에 들어갈 내용들.
2. Function expression(function expression) function [name]([param[, param[, ... param]]]) { statements }  name - 함수의 이름이다. 익명함수로 선언된다면 생략할 수 있다.</description>
    </item>
    
    <item>
      <title>QUERY PROCESSING ORDER 쿼리 처리 순서</title>
      <link>https://llighter.github.io/hugo_blog/2017/03/query-processing-order-%EC%BF%BC%EB%A6%AC-%EC%B2%98%EB%A6%AC-%EC%88%9C%EC%84%9C/</link>
      <pubDate>Mon, 27 Mar 2017 15:03:09 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/03/query-processing-order-%EC%BF%BC%EB%A6%AC-%EC%B2%98%EB%A6%AC-%EC%88%9C%EC%84%9C/</guid>
      <description>이 포스트에서 작성된 글은 Oracle SQL &amp;amp; PL/SQL Optimization for Developers 의 문서의 내용을 참고한 것입니다.  쿼리의 실행 계획(execution plan)을 이야기하기전에 이해해야할 것은 어떻게 오라클이 논리적으로 쿼리를 처리 하는가이다. 아래의 쿼리를 통해 쿼리가 어떻게 논리적으로 동작하는지 살펴보겠다.
SELECT f.product AS beer , p.product AS crisps FROM fridge fs CROSS JOIN pantry p WHERE f.product = &amp;#39;Beer&amp;#39; AND f.temperature &amp;lt; 5 AND f.size = &amp;#39;50 fl oz&amp;#39; AND p.product = &amp;#39;Crisps&amp;#39; AND p.</description>
    </item>
    
    <item>
      <title>SQL REFERENCE 및 교육자료</title>
      <link>https://llighter.github.io/hugo_blog/2017/03/sql-reference-%EB%B0%8F-%EA%B5%90%EC%9C%A1%EC%9E%90%EB%A3%8C/</link>
      <pubDate>Thu, 23 Mar 2017 10:50:00 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/03/sql-reference-%EB%B0%8F-%EA%B5%90%EC%9C%A1%EC%9E%90%EB%A3%8C/</guid>
      <description> EDX.org
 W3School 에서는 기본적인 SQL문에 대한 설명과 실습이 가능하다. W3School SQL Tutorial
 오라클에서 운영하는 공식 sql 페이지 이다. 여기서는 주제에 대한 다양한 예제를 볼 수 있다. ORACLE Live SQL
 Oracle SQL and PL/SQL Optimization for Developers 는 레퍼런스 북으로 이론 및 다양 한 예제를 확인 할 수 있다. Oracle SQL and PL/SQL Optimization for Developers
  </description>
    </item>
    
    <item>
      <title>팍스디지타 문화</title>
      <link>https://llighter.github.io/hugo_blog/2017/03/%ED%8C%8D%EC%8A%A4%EB%94%94%EC%A7%80%ED%83%80-%EB%AC%B8%ED%99%94/</link>
      <pubDate>Wed, 15 Mar 2017 22:29:25 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/03/%ED%8C%8D%EC%8A%A4%EB%94%94%EC%A7%80%ED%83%80-%EB%AC%B8%ED%99%94/</guid>
      <description>모든 사람들은 자기 영역을 가지고 자기가 알아서 일합니다. 관리자가, 아니 누구라도 특정 분야가 돌아가는 방식이 맘에 들지 않아 바꾸고 싶다면 해당 분야 담당자를 먼저 설득해야 합니다. 최종 결정은 항상 담당자가 내립니다.
 특정 사안에 대해 가장 정보를 많이 가진 자가 결정을 내립니다.
 관리자는 개발자와 동등합니다. 제대로 일하는 관리자라면 부하직원들 일에 끼어들 시간이 없어야 합니다. 170명에 달하는 종업원이 중간 관리자 없이 공장장에게 직접 보고하는 노스캐롤라이나 GE공장을 본받아야 합니다.
  결국 가장 중요한것은 스스로 일해야한다는 것입니다.</description>
    </item>
    
  </channel>
</rss>