<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on llighter&#39;s blog</title>
    <link>https://llighter.github.io/hugo_blog/posts/</link>
    <description>Recent content in Posts on llighter&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>hadbsgk@gmail.com (PARK YUNHA)</managingEditor>
    <webMaster>hadbsgk@gmail.com (PARK YUNHA)</webMaster>
    <copyright>(c) 2017 - 2018</copyright>
    <lastBuildDate>Wed, 18 Apr 2018 04:11:22 +0900</lastBuildDate>
    
	<atom:link href="https://llighter.github.io/hugo_blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Compute engine에 MariaDB 설치하기</title>
      <link>https://llighter.github.io/hugo_blog/2018/04/compute-engine%EC%97%90-mariadb-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 18 Apr 2018 04:11:22 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2018/04/compute-engine%EC%97%90-mariadb-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <description>Compute Engine 인스턴스 생성하기 아래와 같이 Compute Engine 인스턴스를 생성한다. OS 이미지는 CentOS를 선택했다.   MariaDB 설치하기 1) MariaDB 설치하기 sudo yum -y install mariadb-server  2) MariaDB 서버 시작하기 sudo service mariadb start  systemctl 명령어를 통해 서비스가 정상적으로 동작하는지 확인합니다.   3) 안전하게 MariaDB 설치하기 mysql_secure_installation 명령을 통해 비밀번호 설정, 원격접속 여부 등을 설정합니다.
sudo mysql_secure_installation  4) MariaDB 접속하기 $ mysql -u root -p Enter password: Welcome to the MariaDB monitor.</description>
    </item>
    
    <item>
      <title>리뷰: 9가지 사례로 익히는 고급 스파크 분석</title>
      <link>https://llighter.github.io/hugo_blog/2018/04/%EB%A6%AC%EB%B7%B0-9%EA%B0%80%EC%A7%80-%EC%82%AC%EB%A1%80%EB%A1%9C-%EC%9D%B5%ED%9E%88%EB%8A%94-%EA%B3%A0%EA%B8%89-%EC%8A%A4%ED%8C%8C%ED%81%AC-%EB%B6%84%EC%84%9D/</link>
      <pubDate>Tue, 17 Apr 2018 00:21:05 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2018/04/%EB%A6%AC%EB%B7%B0-9%EA%B0%80%EC%A7%80-%EC%82%AC%EB%A1%80%EB%A1%9C-%EC%9D%B5%ED%9E%88%EB%8A%94-%EA%B3%A0%EA%B8%89-%EC%8A%A4%ED%8C%8C%ED%81%AC-%EB%B6%84%EC%84%9D/</guid>
      <description>이 책은 스파크를 실제 데이터셋을 기반으로 여러가지 사례를 분석하는 내용으로 이루어져 있다. 이 책을 접할 때 까지 스파크나 스칼라에 대해 공부해 본적이 없었다. 먼저, 불편한 점이 있었다면 초심자로서 처음 설치를 하고 세팅을 하는데에 시간이 많이 들었다. 물론 책의 제목에서 알 수 있듯이 고급(Advanced) 분석이기 때문에 기본적인 설정이나 사용능력은 갖추어야 한다는 측면에서 볼 때 이 책이 잘못한 점은 없다. 다만 사례를 분석하는 만큼 처음 설정에 시간은 많이 쏟지 않고 내용을 따라갈 수 있다면 스파크에 대해 더 친숙하게 다가갈 수 있을 것이라 생각한다.</description>
    </item>
    
    <item>
      <title>no such file or directory - xx.sh^M</title>
      <link>https://llighter.github.io/hugo_blog/2017/05/no-such-file-or-directory---xx.shm/</link>
      <pubDate>Thu, 04 May 2017 15:07:36 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/05/no-such-file-or-directory---xx.shm/</guid>
      <description>나는 현재 맥북을 사용하고 있고 내 터미널의 인터페이스를 세팅하다가 문제이 부딪혔다. 현재 내 터미널 환경은 iterm2를 사용하고 있고 zsh을 사용하고 있다 쉘 인터페이스는 많이 사용하는 zsh + oh my zsh을 사용하는데 여기에는 사용자 커스텀 플러그인들을 적용하여 개인에 맞게 사용할 수 있다. DailyEngineering 에서는 이 분이 사용하는 여러 플러그인들을 및 테마를 올려놓으셨는데 내가 적용하던 중 문제가 발생했다.
문제가 된 상황은 이러하다    위의 그림은 zshrc 파일에서 내가 내려받은 플러그인을 적용하려고 설정한 후 내 터미널을 다시 실행시켰을 때 나타나는 에러 화면이다.</description>
    </item>
    
    <item>
      <title>VS Code 설치 및 Terminal로 실행</title>
      <link>https://llighter.github.io/hugo_blog/2017/04/vs-code-%EC%84%A4%EC%B9%98-%EB%B0%8F-terminal%EB%A1%9C-%EC%8B%A4%ED%96%89/</link>
      <pubDate>Sun, 16 Apr 2017 15:03:27 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/04/vs-code-%EC%84%A4%EC%B9%98-%EB%B0%8F-terminal%EB%A1%9C-%EC%8B%A4%ED%96%89/</guid>
      <description>VS Code를 설치하는 방법과 설치 후 터미널에서 실행하는 방법에 대해 알아보았습니다.
  </description>
    </item>
    
    <item>
      <title>Package.json에 depencency 추가하기</title>
      <link>https://llighter.github.io/hugo_blog/2017/04/package.json%EC%97%90-depencency-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 12 Apr 2017 16:03:53 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/04/package.json%EC%97%90-depencency-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <description>Angular는 NPM을 통해 패키지를 관리한다. Angular 공부를 시작하면서 여러가지 툴들을 사용하게 되는데 이것도 npm은 외부 라이브러리를 사용하려면 필수적으로 알아야 하는 것 중 하나이다.
이번에는 프로젝트 중간에 외부 라이브러리를 추가할 때 어떻게 하는지 알아보려 한다. 현재 내가 작성하고 있는 프로그램은 angular에서 제공하는 tutorial이다. 이 튜토리얼의 6단계에는 http를 사용하여 서버에서 가져온 데이터를 어떻게 관리하는지(CRUD)를 보여주는데 이때 서버를 설정하기 위해 InMemoryWebApiModule 라이브러리가 필요하다. 나는 튜토리얼에서 제공해주는 파일을 사용한 것이 아니라 angular-cli를 사용하여 프로그램을 재 작성하고 있었기 때문에 이 라이브러리가 없었다.</description>
    </item>
    
    <item>
      <title>QuerySelectorAll에서 For loop 사용하기</title>
      <link>https://llighter.github.io/hugo_blog/2017/04/queryselectorall%EC%97%90%EC%84%9C-for-loop-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 10 Apr 2017 15:43:14 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/04/queryselectorall%EC%97%90%EC%84%9C-for-loop-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <description>QuerySelectorAll은 아래와 같이 selectors의 조건에 만족하는 모든 element들의 list를 반환한다. 이때 반환하는 list의 형식은 Nodelist이다. 이 형식을 기억해두자.
elementList = document.querySelectorAll(selectors);  우리의 목적은 이렇게 반환된 elementList의 내용을 반목문을 통해 확인하는 것이다. 여기서는 3가지 방법의 for문을 살펴볼 것이다.
우리가 다룰 elements 이다. &amp;lt;h1&amp;gt;Loop Test&amp;lt;/h1&amp;gt; &amp;lt;div class=&amp;#34;my-tag&amp;#34;&amp;gt;my tag01&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;my-tag&amp;#34;&amp;gt;my tag02&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;my-tag&amp;#34;&amp;gt;my tag03&amp;lt;/div&amp;gt;
1) for (statement 1; statement 2; statement 3)
for(var i = 0; i &amp;lt; myTagList.length; i++) { // my-tag 태그들의 글자 색을 하얀색으로 정한다.</description>
    </item>
    
    <item>
      <title>Volunteer in Mozilla Korea Community 번역으로 시작하기</title>
      <link>https://llighter.github.io/hugo_blog/2017/04/volunteer-in-mozilla-korea-community-%EB%B2%88%EC%97%AD%EC%9C%BC%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 05 Apr 2017 19:17:38 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/04/volunteer-in-mozilla-korea-community-%EB%B2%88%EC%97%AD%EC%9C%BC%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
      <description>RandomSource.getRandomValues() 이 링크는 내가 처음으로 기술 문서를 번역한 페이지이다. 사실 기존에 기술문서를 볼 때 영어 공부하는 심정으로 인내심을 가지고 보고는 했다. 하지만 가끔 가다 한국어로 번역이 되어 있는 문서를 볼 때면 조금 더 빠르고 수월하게 문서의 내용을 이해할 수 있었다. 그러다 마침 javascript의 Math.random() 함수에 대해 알아보고 있던 중에 javascript 에서는 random()함수는 seed를 줄 수 없다는 사실을 알았고 암호학적으로 강력한 수준의 ramdom값을 생성하는 메소드가 있는지 찾아보던 중에 RandomSource.getRandomValues()을 알게 되었다. 많이 사용하는 Math.</description>
    </item>
    
    <item>
      <title>Javascript: 함수 정의하기</title>
      <link>https://llighter.github.io/hugo_blog/2017/04/javascript-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Tue, 04 Apr 2017 19:00:32 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/04/javascript-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0/</guid>
      <description>jQuery(javascript)에서는 함수를 사용하는 방법이 크게 두가지가 있다 아래의 내용은 MDN-Defining functions의 내용을 참고한 것이다.
1. The function declaration(function statement) function name([param[, param[, ... param]]]) { statements }   name   함수의 이름.
  param   함수에 전달될 인자의 이름. 최대 255개 까지 가질 수 있다.
  statements   함수 안에 들어갈 내용들.
 2. Function expression(function expression) function [name]([param[, param[, ... param]]]) { statements }   name   함수의 이름.</description>
    </item>
    
    <item>
      <title>QUERY PROCESSING ORDER 쿼리 처리 순서</title>
      <link>https://llighter.github.io/hugo_blog/2017/03/query-processing-order-%EC%BF%BC%EB%A6%AC-%EC%B2%98%EB%A6%AC-%EC%88%9C%EC%84%9C/</link>
      <pubDate>Mon, 27 Mar 2017 15:03:09 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/03/query-processing-order-%EC%BF%BC%EB%A6%AC-%EC%B2%98%EB%A6%AC-%EC%88%9C%EC%84%9C/</guid>
      <description>이 포스트에서 작성된 글은 Oracle SQL &amp;amp; PL/SQL Optimization for Developers 의 문서의 내용을 참고한 것입니다.  쿼리의 실행 계획(execution plan)을 이야기하기전에 이해해야할 것은 어떻게 오라클이 논리적으로 쿼리를 처리 하는가이다. 아래의 쿼리를 통해 쿼리가 어떻게 논리적으로 동작하는지 살펴보겠다.
SELECT f.product AS beer , p.product AS crisps FROM fridge fs CROSS JOIN pantry p WHERE f.product = &amp;#39;Beer&amp;#39; AND f.temperature &amp;lt; 5 AND f.size = &amp;#39;50 fl oz&amp;#39; AND p.product = &amp;#39;Crisps&amp;#39; AND p.</description>
    </item>
    
    <item>
      <title>SQL REFERENCE 및 교육자료</title>
      <link>https://llighter.github.io/hugo_blog/2017/03/sql-reference-%EB%B0%8F-%EA%B5%90%EC%9C%A1%EC%9E%90%EB%A3%8C/</link>
      <pubDate>Thu, 23 Mar 2017 10:50:00 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/03/sql-reference-%EB%B0%8F-%EA%B5%90%EC%9C%A1%EC%9E%90%EB%A3%8C/</guid>
      <description> EDX.org
 W3School 에서는 기본적인 SQL문에 대한 설명과 실습이 가능하다. W3School SQL Tutorial
 오라클에서 운영하는 공식 sql 페이지 이다. 여기서는 주제에 대한 다양한 예제를 볼 수 있다. ORACLE Live SQL
 Oracle SQL and PL/SQL Optimization for Developers 는 레퍼런스 북으로 이론 및 다양 한 예제를 확인 할 수 있다. Oracle SQL and PL/SQL Optimization for Developers
  </description>
    </item>
    
    <item>
      <title>팍스디지타 문화</title>
      <link>https://llighter.github.io/hugo_blog/2017/03/%ED%8C%8D%EC%8A%A4%EB%94%94%EC%A7%80%ED%83%80-%EB%AC%B8%ED%99%94/</link>
      <pubDate>Wed, 15 Mar 2017 22:29:25 +0900</pubDate>
      <author>hadbsgk@gmail.com (PARK YUNHA)</author>
      <guid>https://llighter.github.io/hugo_blog/2017/03/%ED%8C%8D%EC%8A%A4%EB%94%94%EC%A7%80%ED%83%80-%EB%AC%B8%ED%99%94/</guid>
      <description>모든 사람들은 자기 영역을 가지고 자기가 알아서 일합니다. 관리자가, 아니 누구라도 특정 분야가 돌아가는 방식이 맘에 들지 않아 바꾸고 싶다면 해당 분야 담당자를 먼저 설득해야 합니다. 최종 결정은 항상 담당자가 내립니다.
 특정 사안에 대해 가장 정보를 많이 가진 자가 결정을 내립니다.
 관리자는 개발자와 동등합니다. 제대로 일하는 관리자라면 부하직원들 일에 끼어들 시간이 없어야 합니다. 170명에 달하는 종업원이 중간 관리자 없이 공장장에게 직접 보고하는 노스캐롤라이나 GE공장을 본받아야 합니다.
  결국 가장 중요한것은 스스로 일해야한다는 것입니다.</description>
    </item>
    
  </channel>
</rss>